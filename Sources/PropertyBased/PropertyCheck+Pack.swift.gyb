// Auto-generated from PropertyCheck+Pack.swift.gyb

// Yes, I very much would like to use Swift's parameter packing here,
// but there is currently a compiler crash when trying to evaluate the `Gen` type,
// which needs to read from the Value type pack twice. There is also no way to work around it
// by only packing the Sequence type, since same-type constraints are not currently supported by Swift.
//
// These functions will all be removed as soon as it can be fully expressed using a parameter pack.

import Testing

% for size in range(2, 27):
%  tupleType = ', '.join([chr(n + 65) for n in range(size)])
/// See ``propertyCheck(count:input:perform:isolation:sourceLocation:)``
@_documentation(visibility: private)
@inlinable
public func propertyCheck<
    ${tupleType}
>(
    count: Int = 100,
    input g0: Generator<A, some Sequence<A>>,
%  for n in range(1, size):
%   t = chr(n + 65)
    _ g${n}: Generator<${t}, some Sequence<${t}>>, 
%  end
    perform body: (${tupleType}) async throws -> Void,
    isolation: isolated (any Actor)? = #isolation,
    sourceLocation: SourceLocation = #_sourceLocation
) async {
    await propertyCheck(
        count: count, 
        input: zip(${', '.join([f"g{n}" for n in range(size)])}), 
        perform: {
            try await body(${', '.join([f"$0.{n}" for n in range(size)])})
        }, isolation: isolation, sourceLocation: sourceLocation)
}

% end

// Auto-generated from Zip.swift.gyb

#if compiler(>=6.2)

/// Combines multiple generators into a single one.
///
/// - Parameters:
///   - p0: A generator of `OutA`s.
///   - p1: A generator of `OutB`s.
/// - Returns: A generator of tuples.
@inlinable
public func zip<each Out, each Seq: Sequence>(
    _ gen: repeat Generator<each Out, each Seq>
) -> Generator<
    (repeat each Out),
    Shrink.Tuple<(repeat (each Seq).Element)>
> {
    return .init(
        run: { rng in
            (repeat (each gen).runFull(&rng).input)
        },
        shrink: { tuple in
            Shrink.shrinkTuple(tuple, shrinkers: repeat (each gen)._shrinker)
        },
        finalResult: { input in
            do {
                let pair = (repeat (each input, each gen))
                return try (repeat (each pair).1.tryMap((each pair).0))
            } catch {
                return nil
            }
        })
}

#else

// The above parameter pack function crashes in earlier Swift compilers.

% for size in range(2, 11):
%  inTupleType = ', '.join(["In" + chr(n + 65) for n in range(size)])
%  outTupleType = ', '.join(["Out" + chr(n + 65) for n in range(size)])
/// Combines multiple generators into a single one.
///
/// - Parameters:
%  for n in range(size):
///   - p${n}: A generator of `Out${chr(n + 65)}`s.
%  end
/// - Returns: A generator of tuples.
%  if size != 2:
@_documentation(visibility: private)
%  end
@inlinable
public func zip<${inTupleType}, ${outTupleType}>(
%  for n in range(size):
%   t = chr(n + 65)
    _ p${n}: Generator<Out${t}, some Sequence<In${t}>>, 
%  end
) -> Generator<
    (${outTupleType}),
    Shrink.Tuple<(${inTupleType})>
> {
    return .init(
        run: { rng in (
%  for n in range(size):
            p${n}.runFull(&rng).input,
%  end
        )},
        shrink: { tuple in
            Shrink.shrinkTuple(tuple, shrinkers: ${', '.join([f"p{n}._shrinker" for n in range(size)])})
        }, finalResult: { input in
        guard
%  for n in range(size):
            let r${n} = p${n}._mapFilter(input.${n}),
%  end
            true else { return nil }
        return (${', '.join([f"r{n}" for n in range(size)])})
    })
}

% end

#endif
